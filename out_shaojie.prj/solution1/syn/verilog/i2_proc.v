// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module i2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        compute2_V1_address0,
        compute2_V1_ce0,
        compute2_V1_q0,
        p_0510_0_dout,
        p_0510_0_empty_n,
        p_0510_0_read,
        compute1_V_address0,
        compute1_V_ce0,
        compute1_V_we0,
        compute1_V_d0,
        match2_dout,
        match2_empty_n,
        match2_read,
        hcl_rdv3_V_address0,
        hcl_rdv3_V_ce0,
        hcl_rdv3_V_q0,
        prototype_V_address0,
        prototype_V_ce0,
        prototype_V_we0,
        prototype_V_d0,
        prototypeCounter_V_address0,
        prototypeCounter_V_ce0,
        prototypeCounter_V_we0,
        prototypeCounter_V_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    ap_const_lv64_0 = 64'd0;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [4:0] compute2_V1_address0;
output   compute2_V1_ce0;
input  [0:0] compute2_V1_q0;
input  [4:0] p_0510_0_dout;
input   p_0510_0_empty_n;
output   p_0510_0_read;
output  [4:0] compute1_V_address0;
output   compute1_V_ce0;
output   compute1_V_we0;
output  [31:0] compute1_V_d0;
input  [63:0] match2_dout;
input   match2_empty_n;
output   match2_read;
output  [17:0] hcl_rdv3_V_address0;
output   hcl_rdv3_V_ce0;
input  [63:0] hcl_rdv3_V_q0;
output  [11:0] prototype_V_address0;
output   prototype_V_ce0;
output  [7:0] prototype_V_we0;
output  [63:0] prototype_V_d0;
output  [17:0] prototypeCounter_V_address0;
output   prototypeCounter_V_ce0;
output   prototypeCounter_V_we0;
output  [31:0] prototypeCounter_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg compute2_V1_ce0;
reg p_0510_0_read;
reg compute1_V_ce0;
reg compute1_V_we0;
reg match2_read;
reg hcl_rdv3_V_ce0;
reg prototype_V_ce0;
reg[7:0] prototype_V_we0;
reg[63:0] prototype_V_d0;
reg prototypeCounter_V_ce0;
reg prototypeCounter_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_0510_0_blk_n;
reg    match2_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln887_31_fu_439_p2;
reg   [4:0] p_0510_0_read_reg_686;
reg    ap_block_state1;
reg   [4:0] compute1_V_addr_reg_698;
wire   [19:0] mul_ln791_fu_674_p2;
reg   [19:0] mul_ln791_reg_703;
wire    ap_CS_fsm_state2;
wire   [12:0] mul_ln821_fu_394_p2;
reg   [12:0] mul_ln821_reg_708;
reg   [0:0] compute2_V1_load_reg_713;
wire   [31:0] compute1_temp_V_fu_400_p1;
reg   [31:0] compute1_temp_V_reg_717;
wire   [17:0] mul_ln1371_fu_680_p2;
reg   [17:0] mul_ln1371_reg_722;
wire   [31:0] zext_ln887_fu_407_p1;
reg   [31:0] zext_ln887_reg_727;
wire    ap_CS_fsm_state3;
wire   [6:0] i2_V_fu_417_p2;
reg   [6:0] i2_V_reg_737;
wire   [7:0] y3_V_fu_429_p2;
reg   [7:0] y3_V_reg_745;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln544_22_fu_435_p1;
reg   [63:0] zext_ln544_22_reg_750;
wire   [0:0] icmp_ln887_29_fu_423_p2;
wire   [12:0] r_V_fu_445_p2;
reg    ap_block_state5;
wire   [12:0] sum_V_fu_462_p2;
wire   [7:0] x6_V_fu_474_p2;
wire    ap_CS_fsm_state6;
wire   [7:0] x7_V_fu_491_p2;
reg   [7:0] x7_V_reg_779;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln544_25_fu_497_p1;
reg   [63:0] zext_ln544_25_reg_784;
wire   [0:0] icmp_ln887_33_fu_485_p2;
wire   [7:0] x8_V_fu_530_p2;
reg   [7:0] x8_V_reg_802;
wire   [63:0] zext_ln544_24_fu_536_p1;
reg   [63:0] zext_ln544_24_reg_807;
wire   [0:0] icmp_ln887_32_fu_524_p2;
wire   [13:0] zext_ln81_fu_541_p1;
reg   [13:0] zext_ln81_reg_817;
wire   [7:0] i3_V_fu_584_p2;
reg   [7:0] i3_V_reg_825;
wire    ap_CS_fsm_state10;
wire   [12:0] add_ln821_fu_600_p2;
reg   [12:0] add_ln821_reg_830;
wire   [0:0] icmp_ln887_36_fu_578_p2;
reg   [3:0] tmp_37_reg_840;
(* use_dsp48 = "no" *) wire   [17:0] ret_V_8_fu_632_p2;
reg   [17:0] ret_V_8_reg_845;
reg   [7:0] result_V_address0;
reg    result_V_ce0;
reg    result_V_we0;
wire   [12:0] result_V_q0;
reg   [7:0] sum1_V_address0;
reg    sum1_V_ce0;
reg    sum1_V_we0;
reg   [0:0] sum1_V_d0;
wire   [0:0] sum1_V_q0;
reg   [6:0] bvh_d_index_reg_292;
reg   [7:0] p_0688_0_i_i_reg_304;
wire   [0:0] icmp_ln887_fu_411_p2;
reg   [12:0] p_0757_4_i_i_reg_315;
reg   [12:0] p_0652_0_i_i_reg_327;
reg   [7:0] p_0734_0_i_i_reg_338;
wire   [0:0] icmp_ln887_30_fu_468_p2;
reg   [7:0] p_0856_0_i_i_reg_349;
wire    ap_CS_fsm_state8;
reg   [7:0] p_0895_0_i_i_reg_360;
wire    ap_CS_fsm_state9;
reg   [7:0] p_0982_0_i_i_reg_371;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln544_fu_382_p1;
wire   [63:0] zext_ln544_23_fu_480_p1;
wire   [63:0] zext_ln791_4_fu_519_p1;
wire   [63:0] zext_ln544_26_fu_590_p1;
wire  signed [63:0] sext_ln821_fu_637_p1;
wire   [63:0] zext_ln180_1_fu_665_p1;
wire   [0:0] icmp_ln887_35_fu_564_p2;
wire   [0:0] icmp_ln887_34_fu_571_p2;
wire   [7:0] shl_ln821_fu_658_p2;
wire   [4:0] mul_ln821_fu_394_p0;
wire   [0:0] p_Result_s_fu_451_p3;
wire   [12:0] zext_ln68_fu_458_p1;
wire   [11:0] tmp_fu_502_p4;
wire   [19:0] tmp_35_fu_511_p3;
wire   [0:0] p_Result_5_fu_549_p3;
wire   [13:0] zext_ln786_fu_545_p1;
wire   [13:0] select_ln887_fu_556_p3;
wire   [12:0] zext_ln821_fu_596_p1;
wire   [13:0] shl_ln_fu_615_p3;
wire   [13:0] ret_V_fu_623_p2;
wire   [17:0] zext_ln215_fu_628_p1;
wire   [63:0] p_Repl2_s_fu_641_p1;
wire   [7:0] zext_ln821_8_fu_655_p1;
wire   [4:0] mul_ln791_fu_674_p0;
wire   [14:0] mul_ln791_fu_674_p1;
wire   [4:0] mul_ln1371_fu_680_p0;
wire   [14:0] mul_ln1371_fu_680_p1;
reg   [10:0] ap_NS_fsm;
wire   [17:0] mul_ln1371_fu_680_p00;
wire   [19:0] mul_ln791_fu_674_p00;
wire   [12:0] mul_ln821_fu_394_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
end

i2_proc_result_V #(
    .DataWidth( 13 ),
    .AddressRange( 156 ),
    .AddressWidth( 8 ))
result_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(result_V_address0),
    .ce0(result_V_ce0),
    .we0(result_V_we0),
    .d0(p_0757_4_i_i_reg_315),
    .q0(result_V_q0)
);

i2_proc_sum1_V #(
    .DataWidth( 1 ),
    .AddressRange( 156 ),
    .AddressWidth( 8 ))
sum1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sum1_V_address0),
    .ce0(sum1_V_ce0),
    .we0(sum1_V_we0),
    .d0(sum1_V_d0),
    .q0(sum1_V_q0)
);

test_mul_mul_5ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 20 ))
test_mul_mul_5ns_bkb_U7(
    .din0(mul_ln791_fu_674_p0),
    .din1(mul_ln791_fu_674_p1),
    .dout(mul_ln791_fu_674_p2)
);

test_mul_mul_5ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 18 ))
test_mul_mul_5ns_cud_U8(
    .din0(mul_ln1371_fu_680_p0),
    .din1(mul_ln1371_fu_680_p1),
    .dout(mul_ln1371_fu_680_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln887_fu_411_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bvh_d_index_reg_292 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln887_36_fu_578_p2 == 1'd1))) begin
        bvh_d_index_reg_292 <= i2_V_reg_737;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_29_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0652_0_i_i_reg_327 <= 13'd0;
    end else if ((~((icmp_ln887_31_fu_439_p2 == 1'd0) & (match2_empty_n == 1'b0)) & (icmp_ln887_31_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_0652_0_i_i_reg_327 <= r_V_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0688_0_i_i_reg_304 <= 8'd0;
    end else if ((~((icmp_ln887_31_fu_439_p2 == 1'd0) & (match2_empty_n == 1'b0)) & (icmp_ln887_31_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_0688_0_i_i_reg_304 <= y3_V_reg_745;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln887_29_fu_423_p2 == 1'd1))) begin
        p_0734_0_i_i_reg_338 <= 8'd0;
    end else if (((icmp_ln887_30_fu_468_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_0734_0_i_i_reg_338 <= x6_V_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_29_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0757_4_i_i_reg_315 <= 13'd0;
    end else if ((~((icmp_ln887_31_fu_439_p2 == 1'd0) & (match2_empty_n == 1'b0)) & (icmp_ln887_31_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_0757_4_i_i_reg_315 <= sum_V_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((compute2_V1_load_reg_713 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln887_30_fu_468_p2 == 1'd1))) begin
        p_0856_0_i_i_reg_349 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_0856_0_i_i_reg_349 <= x7_V_reg_779;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln887_30_fu_468_p2 == 1'd1) & (compute2_V1_load_reg_713 == 1'd1))) begin
        p_0895_0_i_i_reg_360 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_0895_0_i_i_reg_360 <= x8_V_reg_802;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_0982_0_i_i_reg_371 <= i3_V_reg_825;
    end else if (((1'b1 == ap_CS_fsm_state7) & (((icmp_ln887_32_fu_524_p2 == 1'd1) & (compute2_V1_load_reg_713 == 1'd1)) | ((compute2_V1_load_reg_713 == 1'd0) & (icmp_ln887_33_fu_485_p2 == 1'd1))))) begin
        p_0982_0_i_i_reg_371 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_36_fu_578_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln821_reg_830 <= add_ln821_fu_600_p2;
        ret_V_8_reg_845 <= ret_V_8_fu_632_p2;
        tmp_37_reg_840 <= {{bvh_d_index_reg_292[6:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_0510_0_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        compute1_V_addr_reg_698 <= zext_ln544_fu_382_p1;
        p_0510_0_read_reg_686 <= p_0510_0_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        compute1_temp_V_reg_717[0] <= compute1_temp_V_fu_400_p1[0];
        compute2_V1_load_reg_713 <= compute2_V1_q0;
        mul_ln1371_reg_722 <= mul_ln1371_fu_680_p2;
        mul_ln791_reg_703 <= mul_ln791_fu_674_p2;
        mul_ln821_reg_708[12 : 2] <= mul_ln821_fu_394_p2[12 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i2_V_reg_737 <= i2_V_fu_417_p2;
        zext_ln887_reg_727[6 : 0] <= zext_ln887_fu_407_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i3_V_reg_825 <= i3_V_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((compute2_V1_load_reg_713 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        x7_V_reg_779 <= x7_V_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (compute2_V1_load_reg_713 == 1'd1))) begin
        x8_V_reg_802 <= x8_V_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y3_V_reg_745 <= y3_V_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_29_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln544_22_reg_750[7 : 0] <= zext_ln544_22_fu_435_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_32_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (compute2_V1_load_reg_713 == 1'd1))) begin
        zext_ln544_24_reg_807[7 : 0] <= zext_ln544_24_fu_536_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_33_fu_485_p2 == 1'd0) & (compute2_V1_load_reg_713 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln544_25_reg_784[7 : 0] <= zext_ln544_25_fu_497_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (((icmp_ln887_32_fu_524_p2 == 1'd1) & (compute2_V1_load_reg_713 == 1'd1)) | ((compute2_V1_load_reg_713 == 1'd0) & (icmp_ln887_33_fu_485_p2 == 1'd1))))) begin
        zext_ln81_reg_817[6 : 0] <= zext_ln81_fu_541_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln887_fu_411_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln887_fu_411_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        compute1_V_ce0 = 1'b1;
    end else begin
        compute1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln887_30_fu_468_p2 == 1'd1))) begin
        compute1_V_we0 = 1'b1;
    end else begin
        compute1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_0510_0_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        compute2_V1_ce0 = 1'b1;
    end else begin
        compute2_V1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        hcl_rdv3_V_ce0 = 1'b1;
    end else begin
        hcl_rdv3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_31_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        match2_blk_n = match2_empty_n;
    end else begin
        match2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln887_31_fu_439_p2 == 1'd0) & (match2_empty_n == 1'b0)) & (icmp_ln887_31_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        match2_read = 1'b1;
    end else begin
        match2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0510_0_blk_n = p_0510_0_empty_n;
    end else begin
        p_0510_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_0510_0_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0510_0_read = 1'b1;
    end else begin
        p_0510_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        prototypeCounter_V_ce0 = 1'b1;
    end else begin
        prototypeCounter_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        prototypeCounter_V_we0 = 1'b1;
    end else begin
        prototypeCounter_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        prototype_V_ce0 = 1'b1;
    end else begin
        prototype_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        prototype_V_we0 = shl_ln821_fu_658_p2;
    end else begin
        prototype_V_we0 = 8'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        result_V_address0 = zext_ln544_26_fu_590_p1;
    end else if (((icmp_ln887_32_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (compute2_V1_load_reg_713 == 1'd1))) begin
        result_V_address0 = zext_ln544_24_fu_536_p1;
    end else if (((icmp_ln887_33_fu_485_p2 == 1'd0) & (compute2_V1_load_reg_713 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        result_V_address0 = zext_ln544_25_fu_497_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        result_V_address0 = zext_ln544_22_reg_750;
    end else begin
        result_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (~((icmp_ln887_31_fu_439_p2 == 1'd0) & (match2_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln887_32_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (compute2_V1_load_reg_713 == 1'd1)) | ((icmp_ln887_33_fu_485_p2 == 1'd0) & (compute2_V1_load_reg_713 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        result_V_ce0 = 1'b1;
    end else begin
        result_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln887_31_fu_439_p2 == 1'd0) & (match2_empty_n == 1'b0)) & (icmp_ln887_31_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        result_V_we0 = 1'b1;
    end else begin
        result_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sum1_V_address0 = zext_ln544_26_fu_590_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sum1_V_address0 = zext_ln544_24_reg_807;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sum1_V_address0 = zext_ln544_25_reg_784;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sum1_V_address0 = zext_ln544_23_fu_480_p1;
    end else begin
        sum1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        sum1_V_ce0 = 1'b1;
    end else begin
        sum1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sum1_V_d0 = icmp_ln887_34_fu_571_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sum1_V_d0 = icmp_ln887_35_fu_564_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sum1_V_d0 = 1'd0;
    end else begin
        sum1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((icmp_ln887_30_fu_468_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        sum1_V_we0 = 1'b1;
    end else begin
        sum1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_0510_0_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln887_fu_411_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln887_29_fu_423_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((icmp_ln887_31_fu_439_p2 == 1'd0) & (match2_empty_n == 1'b0)) & (icmp_ln887_31_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln887_31_fu_439_p2 == 1'd0) & (match2_empty_n == 1'b0)) & (icmp_ln887_31_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln887_30_fu_468_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (((icmp_ln887_32_fu_524_p2 == 1'd1) & (compute2_V1_load_reg_713 == 1'd1)) | ((compute2_V1_load_reg_713 == 1'd0) & (icmp_ln887_33_fu_485_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((icmp_ln887_32_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (compute2_V1_load_reg_713 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln887_36_fu_578_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln821_fu_600_p2 = (zext_ln821_fu_596_p1 + mul_ln821_reg_708);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((p_0510_0_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state5 = ((icmp_ln887_31_fu_439_p2 == 1'd0) & (match2_empty_n == 1'b0));
end

assign compute1_V_address0 = compute1_V_addr_reg_698;

assign compute1_V_d0 = compute1_temp_V_reg_717;

assign compute1_temp_V_fu_400_p1 = compute2_V1_q0;

assign compute2_V1_address0 = zext_ln544_fu_382_p1;

assign hcl_rdv3_V_address0 = zext_ln791_4_fu_519_p1;

assign i2_V_fu_417_p2 = (bvh_d_index_reg_292 + 7'd1);

assign i3_V_fu_584_p2 = (p_0982_0_i_i_reg_371 + 8'd1);

assign icmp_ln887_29_fu_423_p2 = ((p_0688_0_i_i_reg_304 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln887_30_fu_468_p2 = ((p_0734_0_i_i_reg_338 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln887_31_fu_439_p2 = ((p_0652_0_i_i_reg_327 == 13'd6238) ? 1'b1 : 1'b0);

assign icmp_ln887_32_fu_524_p2 = ((p_0895_0_i_i_reg_360 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln887_33_fu_485_p2 = ((p_0856_0_i_i_reg_349 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln887_34_fu_571_p2 = ((result_V_q0 != 13'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_35_fu_564_p2 = ((zext_ln786_fu_545_p1 != select_ln887_fu_556_p3) ? 1'b1 : 1'b0);

assign icmp_ln887_36_fu_578_p2 = ((p_0982_0_i_i_reg_371 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_411_p2 = ((bvh_d_index_reg_292 == 7'd64) ? 1'b1 : 1'b0);

assign mul_ln1371_fu_680_p0 = mul_ln1371_fu_680_p00;

assign mul_ln1371_fu_680_p00 = p_0510_0_read_reg_686;

assign mul_ln1371_fu_680_p1 = 18'd9984;

assign mul_ln791_fu_674_p0 = mul_ln791_fu_674_p00;

assign mul_ln791_fu_674_p00 = p_0510_0_read_reg_686;

assign mul_ln791_fu_674_p1 = 20'd9984;

assign mul_ln821_fu_394_p0 = mul_ln821_fu_394_p00;

assign mul_ln821_fu_394_p00 = p_0510_0_read_reg_686;

assign mul_ln821_fu_394_p2 = (mul_ln821_fu_394_p0 * $signed('h9C));

assign p_Repl2_s_fu_641_p1 = sum1_V_q0;

assign p_Result_5_fu_549_p3 = hcl_rdv3_V_q0[zext_ln887_reg_727];

assign p_Result_s_fu_451_p3 = match2_dout[zext_ln887_reg_727];

assign prototypeCounter_V_address0 = zext_ln180_1_fu_665_p1;

assign prototypeCounter_V_d0 = result_V_q0;

assign prototype_V_address0 = sext_ln821_fu_637_p1;

always @ (*) begin
    prototype_V_d0 = ap_const_lv64_0;
    prototype_V_d0[zext_ln887_reg_727] = |(p_Repl2_s_fu_641_p1);
end

assign r_V_fu_445_p2 = (p_0652_0_i_i_reg_327 + 13'd1);

assign ret_V_8_fu_632_p2 = (mul_ln1371_reg_722 + zext_ln215_fu_628_p1);

assign ret_V_fu_623_p2 = (shl_ln_fu_615_p3 + zext_ln81_reg_817);

assign select_ln887_fu_556_p3 = ((p_Result_5_fu_549_p3[0:0] === 1'b1) ? 14'd16383 : 14'd0);

assign sext_ln821_fu_637_p1 = $signed(add_ln821_reg_830);

assign shl_ln821_fu_658_p2 = 8'd255 << zext_ln821_8_fu_655_p1;

assign shl_ln_fu_615_p3 = {{p_0982_0_i_i_reg_371}, {6'd0}};

assign sum_V_fu_462_p2 = (zext_ln68_fu_458_p1 + p_0757_4_i_i_reg_315);

assign tmp_35_fu_511_p3 = {{tmp_fu_502_p4}, {p_0856_0_i_i_reg_349}};

assign tmp_fu_502_p4 = {{mul_ln791_reg_703[19:8]}};

assign x6_V_fu_474_p2 = (p_0734_0_i_i_reg_338 + 8'd1);

assign x7_V_fu_491_p2 = (p_0856_0_i_i_reg_349 + 8'd1);

assign x8_V_fu_530_p2 = (p_0895_0_i_i_reg_360 + 8'd1);

assign y3_V_fu_429_p2 = (p_0688_0_i_i_reg_304 + 8'd1);

assign zext_ln180_1_fu_665_p1 = ret_V_8_reg_845;

assign zext_ln215_fu_628_p1 = ret_V_fu_623_p2;

assign zext_ln544_22_fu_435_p1 = p_0688_0_i_i_reg_304;

assign zext_ln544_23_fu_480_p1 = p_0734_0_i_i_reg_338;

assign zext_ln544_24_fu_536_p1 = p_0895_0_i_i_reg_360;

assign zext_ln544_25_fu_497_p1 = p_0856_0_i_i_reg_349;

assign zext_ln544_26_fu_590_p1 = p_0982_0_i_i_reg_371;

assign zext_ln544_fu_382_p1 = p_0510_0_dout;

assign zext_ln68_fu_458_p1 = p_Result_s_fu_451_p3;

assign zext_ln786_fu_545_p1 = result_V_q0;

assign zext_ln791_4_fu_519_p1 = tmp_35_fu_511_p3;

assign zext_ln81_fu_541_p1 = bvh_d_index_reg_292;

assign zext_ln821_8_fu_655_p1 = tmp_37_reg_840;

assign zext_ln821_fu_596_p1 = p_0982_0_i_i_reg_371;

assign zext_ln887_fu_407_p1 = bvh_d_index_reg_292;

always @ (posedge ap_clk) begin
    mul_ln821_reg_708[1:0] <= 2'b00;
    compute1_temp_V_reg_717[31:1] <= 31'b0000000000000000000000000000000;
    zext_ln887_reg_727[31:7] <= 25'b0000000000000000000000000;
    zext_ln544_22_reg_750[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln544_25_reg_784[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln544_24_reg_807[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln81_reg_817[13:7] <= 7'b0000000;
end

endmodule //i2_proc
