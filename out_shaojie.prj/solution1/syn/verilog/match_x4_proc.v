// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module match_x4_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        hcl_trainLabels_V_address0,
        hcl_trainLabels_V_ce0,
        hcl_trainLabels_V_q0,
        compute2_V1_address0,
        compute2_V1_ce0,
        compute2_V1_we0,
        compute2_V1_d0,
        p_0510_0,
        hcl_in_train_V_address0,
        hcl_in_train_V_ce0,
        hcl_in_train_V_q0,
        match2_din,
        match2_full_n,
        match2_write,
        p_0510_0_out_din,
        p_0510_0_out_full_n,
        p_0510_0_out_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [12:0] hcl_trainLabels_V_address0;
output   hcl_trainLabels_V_ce0;
input  [31:0] hcl_trainLabels_V_q0;
output  [4:0] compute2_V1_address0;
output   compute2_V1_ce0;
output   compute2_V1_we0;
output  [0:0] compute2_V1_d0;
input  [4:0] p_0510_0;
output  [19:0] hcl_in_train_V_address0;
output   hcl_in_train_V_ce0;
input  [63:0] hcl_in_train_V_q0;
output  [63:0] match2_din;
input   match2_full_n;
output   match2_write;
output  [4:0] p_0510_0_out_din;
input   p_0510_0_out_full_n;
output   p_0510_0_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg hcl_trainLabels_V_ce0;
reg compute2_V1_ce0;
reg compute2_V1_we0;
reg hcl_in_train_V_ce0;
reg[63:0] match2_din;
reg match2_write;
reg p_0510_0_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    match2_blk_n;
wire    ap_CS_fsm_state7;
reg   [0:0] icmp_ln879_reg_301;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln879_fu_251_p2;
reg    p_0510_0_out_blk_n;
reg   [4:0] compute2_V1_addr_reg_260;
reg    ap_block_state1;
wire   [31:0] zext_ln32_fu_202_p1;
reg   [31:0] zext_ln32_reg_265;
wire   [19:0] add_ln887_fu_206_p2;
reg   [19:0] add_ln887_reg_270;
wire    ap_CS_fsm_state2;
wire   [12:0] x4_V_fu_218_p2;
reg   [12:0] x4_V_reg_278;
reg   [12:0] hcl_trainLabels_V_ad_reg_283;
wire   [0:0] icmp_ln887_fu_212_p2;
wire   [7:0] y2_V_fu_235_p2;
reg   [7:0] y2_V_reg_291;
wire    ap_CS_fsm_state3;
wire   [19:0] add_ln321_fu_245_p2;
reg   [19:0] add_ln321_reg_296;
wire   [0:0] icmp_ln887_28_fu_229_p2;
reg    ap_block_state4;
reg   [12:0] p_0465_0_i_i_reg_150;
reg   [19:0] phi_mul_reg_161;
reg   [7:0] p_0618_0_i_i_reg_173;
reg    ap_block_state7;
reg   [0:0] ap_phi_mux_storemerge_i_i_phi_fu_188_p4;
reg   [0:0] storemerge_i_i_reg_184;
wire   [63:0] zext_ln544_fu_197_p1;
wire   [63:0] zext_ln544_21_fu_224_p1;
wire   [63:0] zext_ln321_2_fu_256_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [19:0] zext_ln321_fu_241_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln887_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_28_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0465_0_i_i_reg_150 <= x4_V_reg_278;
    end else if ((~((p_0510_0_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0465_0_i_i_reg_150 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln879_reg_301 == 1'd1) & (match2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        p_0618_0_i_i_reg_173 <= y2_V_reg_291;
    end else if (((icmp_ln887_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0618_0_i_i_reg_173 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_28_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_161 <= add_ln887_reg_270;
    end else if ((~((p_0510_0_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_161 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln879_reg_301 == 1'd1) & (match2_full_n == 1'b0)) & (icmp_ln879_reg_301 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        storemerge_i_i_reg_184 <= 1'd1;
    end else if ((~((icmp_ln879_fu_251_p2 == 1'd0) & (match2_full_n == 1'b0)) & (icmp_ln879_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        storemerge_i_i_reg_184 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_28_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln321_reg_296 <= add_ln321_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln887_reg_270 <= add_ln887_fu_206_p2;
        x4_V_reg_278 <= x4_V_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_0510_0_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        compute2_V1_addr_reg_260 <= zext_ln544_fu_197_p1;
        zext_ln32_reg_265[4 : 0] <= zext_ln32_fu_202_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        hcl_trainLabels_V_ad_reg_283 <= zext_ln544_21_fu_224_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln879_fu_251_p2 == 1'd0) & (match2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln879_reg_301 <= icmp_ln879_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y2_V_reg_291 <= y2_V_fu_235_p2;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln879_reg_301 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_storemerge_i_i_phi_fu_188_p4 = 1'd1;
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_188_p4 = storemerge_i_i_reg_184;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln879_reg_301 == 1'd1) & (match2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        compute2_V1_ce0 = 1'b1;
    end else begin
        compute2_V1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln879_reg_301 == 1'd1) & (match2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        compute2_V1_we0 = 1'b1;
    end else begin
        compute2_V1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (~((icmp_ln879_fu_251_p2 == 1'd0) & (match2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln879_reg_301 == 1'd1) & (match2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)))) begin
        hcl_in_train_V_ce0 = 1'b1;
    end else begin
        hcl_in_train_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hcl_trainLabels_V_ce0 = 1'b1;
    end else begin
        hcl_trainLabels_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln879_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln879_reg_301 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        match2_blk_n = match2_full_n;
    end else begin
        match2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln879_reg_301 == 1'd1) & (match2_full_n == 1'b0)) & (icmp_ln879_reg_301 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        match2_din = hcl_in_train_V_q0;
    end else if ((~((icmp_ln879_fu_251_p2 == 1'd0) & (match2_full_n == 1'b0)) & (icmp_ln879_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        match2_din = 64'd0;
    end else begin
        match2_din = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln879_fu_251_p2 == 1'd0) & (match2_full_n == 1'b0)) & (icmp_ln879_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln879_reg_301 == 1'd1) & (match2_full_n == 1'b0)) & (icmp_ln879_reg_301 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        match2_write = 1'b1;
    end else begin
        match2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0510_0_out_blk_n = p_0510_0_out_full_n;
    end else begin
        p_0510_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_0510_0_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0510_0_out_write = 1'b1;
    end else begin
        p_0510_0_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_0510_0_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln887_28_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln879_fu_251_p2 == 1'd0) & (match2_full_n == 1'b0)) & (icmp_ln879_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((icmp_ln879_fu_251_p2 == 1'd0) & (match2_full_n == 1'b0)) & (icmp_ln879_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if ((~((icmp_ln879_reg_301 == 1'd1) & (match2_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln321_fu_245_p2 = (phi_mul_reg_161 + zext_ln321_fu_241_p1);

assign add_ln887_fu_206_p2 = (phi_mul_reg_161 + 20'd156);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((p_0510_0_out_full_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln879_fu_251_p2 == 1'd0) & (match2_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((icmp_ln879_reg_301 == 1'd1) & (match2_full_n == 1'b0));
end

assign compute2_V1_address0 = compute2_V1_addr_reg_260;

assign compute2_V1_d0 = ap_phi_mux_storemerge_i_i_phi_fu_188_p4;

assign hcl_in_train_V_address0 = zext_ln321_2_fu_256_p1;

assign hcl_trainLabels_V_address0 = hcl_trainLabels_V_ad_reg_283;

assign icmp_ln879_fu_251_p2 = ((hcl_trainLabels_V_q0 == zext_ln32_reg_265) ? 1'b1 : 1'b0);

assign icmp_ln887_28_fu_229_p2 = ((p_0618_0_i_i_reg_173 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_212_p2 = ((p_0465_0_i_i_reg_150 == 13'd6238) ? 1'b1 : 1'b0);

assign p_0510_0_out_din = p_0510_0;

assign x4_V_fu_218_p2 = (p_0465_0_i_i_reg_150 + 13'd1);

assign y2_V_fu_235_p2 = (p_0618_0_i_i_reg_173 + 8'd1);

assign zext_ln321_2_fu_256_p1 = add_ln321_reg_296;

assign zext_ln321_fu_241_p1 = p_0618_0_i_i_reg_173;

assign zext_ln32_fu_202_p1 = p_0510_0;

assign zext_ln544_21_fu_224_p1 = p_0465_0_i_i_reg_150;

assign zext_ln544_fu_197_p1 = p_0510_0;

always @ (posedge ap_clk) begin
    zext_ln32_reg_265[31:5] <= 27'b000000000000000000000000000;
end

endmodule //match_x4_proc
