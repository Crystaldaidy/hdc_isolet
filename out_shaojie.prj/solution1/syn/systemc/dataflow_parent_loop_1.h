// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dataflow_parent_loop_1_HH_
#define _dataflow_parent_loop_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dataflow_in_loop_lea.h"

namespace ap_rtl {

struct dataflow_parent_loop_1 : public sc_module {
    // Port declarations 67
    sc_out< sc_lv<13> > hcl_trainLabels_V_address0;
    sc_out< sc_logic > hcl_trainLabels_V_ce0;
    sc_out< sc_lv<32> > hcl_trainLabels_V_d0;
    sc_in< sc_lv<32> > hcl_trainLabels_V_q0;
    sc_out< sc_logic > hcl_trainLabels_V_we0;
    sc_out< sc_lv<13> > hcl_trainLabels_V_address1;
    sc_out< sc_logic > hcl_trainLabels_V_ce1;
    sc_out< sc_lv<32> > hcl_trainLabels_V_d1;
    sc_in< sc_lv<32> > hcl_trainLabels_V_q1;
    sc_out< sc_logic > hcl_trainLabels_V_we1;
    sc_out< sc_lv<20> > hcl_in_train_V_address0;
    sc_out< sc_logic > hcl_in_train_V_ce0;
    sc_out< sc_lv<64> > hcl_in_train_V_d0;
    sc_in< sc_lv<64> > hcl_in_train_V_q0;
    sc_out< sc_logic > hcl_in_train_V_we0;
    sc_out< sc_lv<20> > hcl_in_train_V_address1;
    sc_out< sc_logic > hcl_in_train_V_ce1;
    sc_out< sc_lv<64> > hcl_in_train_V_d1;
    sc_in< sc_lv<64> > hcl_in_train_V_q1;
    sc_out< sc_logic > hcl_in_train_V_we1;
    sc_out< sc_lv<5> > compute1_V_address0;
    sc_out< sc_logic > compute1_V_ce0;
    sc_out< sc_lv<32> > compute1_V_d0;
    sc_in< sc_lv<32> > compute1_V_q0;
    sc_out< sc_logic > compute1_V_we0;
    sc_out< sc_lv<5> > compute1_V_address1;
    sc_out< sc_logic > compute1_V_ce1;
    sc_out< sc_lv<32> > compute1_V_d1;
    sc_in< sc_lv<32> > compute1_V_q1;
    sc_out< sc_logic > compute1_V_we1;
    sc_out< sc_lv<18> > hcl_rdv3_V_address0;
    sc_out< sc_logic > hcl_rdv3_V_ce0;
    sc_out< sc_lv<64> > hcl_rdv3_V_d0;
    sc_in< sc_lv<64> > hcl_rdv3_V_q0;
    sc_out< sc_logic > hcl_rdv3_V_we0;
    sc_out< sc_lv<18> > hcl_rdv3_V_address1;
    sc_out< sc_logic > hcl_rdv3_V_ce1;
    sc_out< sc_lv<64> > hcl_rdv3_V_d1;
    sc_in< sc_lv<64> > hcl_rdv3_V_q1;
    sc_out< sc_logic > hcl_rdv3_V_we1;
    sc_out< sc_lv<12> > prototype_V_address0;
    sc_out< sc_logic > prototype_V_ce0;
    sc_out< sc_lv<64> > prototype_V_d0;
    sc_in< sc_lv<64> > prototype_V_q0;
    sc_out< sc_logic > prototype_V_we0;
    sc_out< sc_lv<12> > prototype_V_address1;
    sc_out< sc_logic > prototype_V_ce1;
    sc_out< sc_lv<64> > prototype_V_d1;
    sc_in< sc_lv<64> > prototype_V_q1;
    sc_out< sc_logic > prototype_V_we1;
    sc_out< sc_lv<18> > prototypeCounter_V_address0;
    sc_out< sc_logic > prototypeCounter_V_ce0;
    sc_out< sc_lv<32> > prototypeCounter_V_d0;
    sc_in< sc_lv<32> > prototypeCounter_V_q0;
    sc_out< sc_logic > prototypeCounter_V_we0;
    sc_out< sc_lv<18> > prototypeCounter_V_address1;
    sc_out< sc_logic > prototypeCounter_V_ce1;
    sc_out< sc_lv<32> > prototypeCounter_V_d1;
    sc_in< sc_lv<32> > prototypeCounter_V_q1;
    sc_out< sc_logic > prototypeCounter_V_we1;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const2;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<64> > ap_var_for_const1;


    // Module declarations
    dataflow_parent_loop_1(sc_module_name name);
    SC_HAS_PROCESS(dataflow_parent_loop_1);

    ~dataflow_parent_loop_1();

    sc_trace_file* mVcdFile;

    dataflow_in_loop_lea* dataflow_in_loop_lea_U0;
    sc_signal< sc_lv<13> > dataflow_in_loop_lea_U0_hcl_trainLabels_V_address0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_trainLabels_V_ce0;
    sc_signal< sc_lv<32> > dataflow_in_loop_lea_U0_hcl_trainLabels_V_d0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_trainLabels_V_we0;
    sc_signal< sc_lv<13> > dataflow_in_loop_lea_U0_hcl_trainLabels_V_address1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_trainLabels_V_ce1;
    sc_signal< sc_lv<32> > dataflow_in_loop_lea_U0_hcl_trainLabels_V_d1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_trainLabels_V_we1;
    sc_signal< sc_lv<20> > dataflow_in_loop_lea_U0_hcl_in_train_V_address0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_in_train_V_ce0;
    sc_signal< sc_lv<64> > dataflow_in_loop_lea_U0_hcl_in_train_V_d0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_in_train_V_we0;
    sc_signal< sc_lv<20> > dataflow_in_loop_lea_U0_hcl_in_train_V_address1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_in_train_V_ce1;
    sc_signal< sc_lv<64> > dataflow_in_loop_lea_U0_hcl_in_train_V_d1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_in_train_V_we1;
    sc_signal< sc_lv<5> > dataflow_in_loop_lea_U0_compute1_V_address0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_compute1_V_ce0;
    sc_signal< sc_lv<32> > dataflow_in_loop_lea_U0_compute1_V_d0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_compute1_V_we0;
    sc_signal< sc_lv<5> > dataflow_in_loop_lea_U0_compute1_V_address1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_compute1_V_ce1;
    sc_signal< sc_lv<32> > dataflow_in_loop_lea_U0_compute1_V_d1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_compute1_V_we1;
    sc_signal< sc_lv<18> > dataflow_in_loop_lea_U0_hcl_rdv3_V_address0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_rdv3_V_ce0;
    sc_signal< sc_lv<64> > dataflow_in_loop_lea_U0_hcl_rdv3_V_d0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_rdv3_V_we0;
    sc_signal< sc_lv<18> > dataflow_in_loop_lea_U0_hcl_rdv3_V_address1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_rdv3_V_ce1;
    sc_signal< sc_lv<64> > dataflow_in_loop_lea_U0_hcl_rdv3_V_d1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_hcl_rdv3_V_we1;
    sc_signal< sc_lv<12> > dataflow_in_loop_lea_U0_prototype_V_address0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_prototype_V_ce0;
    sc_signal< sc_lv<64> > dataflow_in_loop_lea_U0_prototype_V_d0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_prototype_V_we0;
    sc_signal< sc_lv<12> > dataflow_in_loop_lea_U0_prototype_V_address1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_prototype_V_ce1;
    sc_signal< sc_lv<64> > dataflow_in_loop_lea_U0_prototype_V_d1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_prototype_V_we1;
    sc_signal< sc_lv<18> > dataflow_in_loop_lea_U0_prototypeCounter_V_address0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_prototypeCounter_V_ce0;
    sc_signal< sc_lv<32> > dataflow_in_loop_lea_U0_prototypeCounter_V_d0;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_prototypeCounter_V_we0;
    sc_signal< sc_lv<18> > dataflow_in_loop_lea_U0_prototypeCounter_V_address1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_prototypeCounter_V_ce1;
    sc_signal< sc_lv<32> > dataflow_in_loop_lea_U0_prototypeCounter_V_d1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_prototypeCounter_V_we1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_ap_start;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_ap_done;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_ap_ready;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_ap_idle;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_ap_continue;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<5> > loop_dataflow_input_count;
    sc_signal< sc_lv<5> > loop_dataflow_output_count;
    sc_signal< sc_lv<5> > bound_minus_1;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_start_full_n;
    sc_signal< sc_logic > dataflow_in_loop_lea_U0_start_write;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<18> ap_const_lv18_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<5> ap_const_lv5_1A;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_1;
    // Thread declarations
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_bound_minus_1();
    void thread_compute1_V_address0();
    void thread_compute1_V_address1();
    void thread_compute1_V_ce0();
    void thread_compute1_V_ce1();
    void thread_compute1_V_d0();
    void thread_compute1_V_d1();
    void thread_compute1_V_we0();
    void thread_compute1_V_we1();
    void thread_dataflow_in_loop_lea_U0_ap_continue();
    void thread_dataflow_in_loop_lea_U0_ap_start();
    void thread_dataflow_in_loop_lea_U0_start_full_n();
    void thread_dataflow_in_loop_lea_U0_start_write();
    void thread_hcl_in_train_V_address0();
    void thread_hcl_in_train_V_address1();
    void thread_hcl_in_train_V_ce0();
    void thread_hcl_in_train_V_ce1();
    void thread_hcl_in_train_V_d0();
    void thread_hcl_in_train_V_d1();
    void thread_hcl_in_train_V_we0();
    void thread_hcl_in_train_V_we1();
    void thread_hcl_rdv3_V_address0();
    void thread_hcl_rdv3_V_address1();
    void thread_hcl_rdv3_V_ce0();
    void thread_hcl_rdv3_V_ce1();
    void thread_hcl_rdv3_V_d0();
    void thread_hcl_rdv3_V_d1();
    void thread_hcl_rdv3_V_we0();
    void thread_hcl_rdv3_V_we1();
    void thread_hcl_trainLabels_V_address0();
    void thread_hcl_trainLabels_V_address1();
    void thread_hcl_trainLabels_V_ce0();
    void thread_hcl_trainLabels_V_ce1();
    void thread_hcl_trainLabels_V_d0();
    void thread_hcl_trainLabels_V_d1();
    void thread_hcl_trainLabels_V_we0();
    void thread_hcl_trainLabels_V_we1();
    void thread_prototypeCounter_V_address0();
    void thread_prototypeCounter_V_address1();
    void thread_prototypeCounter_V_ce0();
    void thread_prototypeCounter_V_ce1();
    void thread_prototypeCounter_V_d0();
    void thread_prototypeCounter_V_d1();
    void thread_prototypeCounter_V_we0();
    void thread_prototypeCounter_V_we1();
    void thread_prototype_V_address0();
    void thread_prototype_V_address1();
    void thread_prototype_V_ce0();
    void thread_prototype_V_ce1();
    void thread_prototype_V_d0();
    void thread_prototype_V_d1();
    void thread_prototype_V_we0();
    void thread_prototype_V_we1();
};

}

using namespace ap_rtl;

#endif
