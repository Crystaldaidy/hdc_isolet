-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity i2_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    compute2_V1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    compute2_V1_ce0 : OUT STD_LOGIC;
    compute2_V1_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    p_0510_0_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    p_0510_0_empty_n : IN STD_LOGIC;
    p_0510_0_read : OUT STD_LOGIC;
    compute1_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    compute1_V_ce0 : OUT STD_LOGIC;
    compute1_V_we0 : OUT STD_LOGIC;
    compute1_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    match2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    match2_empty_n : IN STD_LOGIC;
    match2_read : OUT STD_LOGIC;
    hcl_rdv3_V_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    hcl_rdv3_V_ce0 : OUT STD_LOGIC;
    hcl_rdv3_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    prototype_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    prototype_V_ce0 : OUT STD_LOGIC;
    prototype_V_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    prototype_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    prototypeCounter_V_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    prototypeCounter_V_ce0 : OUT STD_LOGIC;
    prototypeCounter_V_we0 : OUT STD_LOGIC;
    prototypeCounter_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of i2_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv13_9C : STD_LOGIC_VECTOR (12 downto 0) := "0000010011100";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_9C : STD_LOGIC_VECTOR (7 downto 0) := "10011100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv13_185E : STD_LOGIC_VECTOR (12 downto 0) := "1100001011110";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv20_2700 : STD_LOGIC_VECTOR (19 downto 0) := "00000010011100000000";
    constant ap_const_lv18_2700 : STD_LOGIC_VECTOR (17 downto 0) := "000010011100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_0510_0_blk_n : STD_LOGIC;
    signal match2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln887_31_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0510_0_read_reg_686 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal compute1_V_addr_reg_698 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln791_fu_674_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln791_reg_703 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln821_fu_394_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln821_reg_708 : STD_LOGIC_VECTOR (12 downto 0);
    signal compute2_V1_load_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal compute1_temp_V_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute1_temp_V_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1371_fu_680_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1371_reg_722 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln887_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln887_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i2_V_fu_417_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_V_reg_737 : STD_LOGIC_VECTOR (6 downto 0);
    signal y3_V_fu_429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y3_V_reg_745 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln544_22_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_22_reg_750 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln887_29_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_445_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal sum_V_fu_462_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal x6_V_fu_474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal x7_V_fu_491_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x7_V_reg_779 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln544_25_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_25_reg_784 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln887_33_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x8_V_fu_530_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x8_V_reg_802 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln544_24_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_24_reg_807 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln887_32_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln81_fu_541_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln81_reg_817 : STD_LOGIC_VECTOR (13 downto 0);
    signal i3_V_fu_584_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i3_V_reg_825 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln821_fu_600_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln821_reg_830 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln887_36_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_840 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_8_fu_632_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_8_fu_632_p2 : signal is "no";
    signal ret_V_8_reg_845 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_ce0 : STD_LOGIC;
    signal result_V_we0 : STD_LOGIC;
    signal result_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum1_V_ce0 : STD_LOGIC;
    signal sum1_V_we0 : STD_LOGIC;
    signal sum1_V_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum1_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal bvh_d_index_reg_292 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_0688_0_i_i_reg_304 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln887_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0757_4_i_i_reg_315 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_0652_0_i_i_reg_327 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_0734_0_i_i_reg_338 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln887_30_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0856_0_i_i_reg_349 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_0895_0_i_i_reg_360 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_0982_0_i_i_reg_371 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln544_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_23_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln791_4_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_26_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln821_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_1_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln887_35_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_34_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln821_fu_658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln821_fu_394_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_s_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln68_fu_458_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_502_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_fu_511_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Result_5_fu_549_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln786_fu_545_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln887_fu_556_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln821_fu_596_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_615_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_fu_623_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln215_fu_628_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Repl2_s_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln821_8_fu_655_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln791_fu_674_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln791_fu_674_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1371_fu_680_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1371_fu_680_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1371_fu_680_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln791_fu_674_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln821_fu_394_p00 : STD_LOGIC_VECTOR (12 downto 0);

    component test_mul_mul_5ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component test_mul_mul_5ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component i2_proc_result_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component i2_proc_sum1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    result_V_U : component i2_proc_result_V
    generic map (
        DataWidth => 13,
        AddressRange => 156,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_V_address0,
        ce0 => result_V_ce0,
        we0 => result_V_we0,
        d0 => p_0757_4_i_i_reg_315,
        q0 => result_V_q0);

    sum1_V_U : component i2_proc_sum1_V
    generic map (
        DataWidth => 1,
        AddressRange => 156,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sum1_V_address0,
        ce0 => sum1_V_ce0,
        we0 => sum1_V_we0,
        d0 => sum1_V_d0,
        q0 => sum1_V_q0);

    test_mul_mul_5ns_bkb_U7 : component test_mul_mul_5ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 15,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln791_fu_674_p0,
        din1 => mul_ln791_fu_674_p1,
        dout => mul_ln791_fu_674_p2);

    test_mul_mul_5ns_cud_U8 : component test_mul_mul_5ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 15,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln1371_fu_680_p0,
        din1 => mul_ln1371_fu_680_p1,
        dout => mul_ln1371_fu_680_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_fu_411_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    bvh_d_index_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                bvh_d_index_reg_292 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln887_36_fu_578_p2 = ap_const_lv1_1))) then 
                bvh_d_index_reg_292 <= i2_V_reg_737;
            end if; 
        end if;
    end process;

    p_0652_0_i_i_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_29_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0652_0_i_i_reg_327 <= ap_const_lv13_0;
            elsif ((not(((icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (match2_empty_n = ap_const_logic_0))) and (icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0652_0_i_i_reg_327 <= r_V_fu_445_p2;
            end if; 
        end if;
    end process;

    p_0688_0_i_i_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0688_0_i_i_reg_304 <= ap_const_lv8_0;
            elsif ((not(((icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (match2_empty_n = ap_const_logic_0))) and (icmp_ln887_31_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0688_0_i_i_reg_304 <= y3_V_reg_745;
            end if; 
        end if;
    end process;

    p_0734_0_i_i_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_29_fu_423_p2 = ap_const_lv1_1))) then 
                p_0734_0_i_i_reg_338 <= ap_const_lv8_0;
            elsif (((icmp_ln887_30_fu_468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_0734_0_i_i_reg_338 <= x6_V_fu_474_p2;
            end if; 
        end if;
    end process;

    p_0757_4_i_i_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_29_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0757_4_i_i_reg_315 <= ap_const_lv13_0;
            elsif ((not(((icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (match2_empty_n = ap_const_logic_0))) and (icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0757_4_i_i_reg_315 <= sum_V_fu_462_p2;
            end if; 
        end if;
    end process;

    p_0856_0_i_i_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((compute2_V1_load_reg_713 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_30_fu_468_p2 = ap_const_lv1_1))) then 
                p_0856_0_i_i_reg_349 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_0856_0_i_i_reg_349 <= x7_V_reg_779;
            end if; 
        end if;
    end process;

    p_0895_0_i_i_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_30_fu_468_p2 = ap_const_lv1_1) and (compute2_V1_load_reg_713 = ap_const_lv1_1))) then 
                p_0895_0_i_i_reg_360 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_0895_0_i_i_reg_360 <= x8_V_reg_802;
            end if; 
        end if;
    end process;

    p_0982_0_i_i_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_0982_0_i_i_reg_371 <= i3_V_reg_825;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (((icmp_ln887_32_fu_524_p2 = ap_const_lv1_1) and (compute2_V1_load_reg_713 = ap_const_lv1_1)) or ((compute2_V1_load_reg_713 = ap_const_lv1_0) and (icmp_ln887_33_fu_485_p2 = ap_const_lv1_1))))) then 
                p_0982_0_i_i_reg_371 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_36_fu_578_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                add_ln821_reg_830 <= add_ln821_fu_600_p2;
                ret_V_8_reg_845 <= ret_V_8_fu_632_p2;
                tmp_37_reg_840 <= bvh_d_index_reg_292(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_0510_0_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                compute1_V_addr_reg_698 <= zext_ln544_fu_382_p1(5 - 1 downto 0);
                p_0510_0_read_reg_686 <= p_0510_0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    compute1_temp_V_reg_717(0) <= compute1_temp_V_fu_400_p1(0);
                compute2_V1_load_reg_713 <= compute2_V1_q0;
                mul_ln1371_reg_722 <= mul_ln1371_fu_680_p2;
                mul_ln791_reg_703 <= mul_ln791_fu_674_p2;
                    mul_ln821_reg_708(12 downto 2) <= mul_ln821_fu_394_p2(12 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i2_V_reg_737 <= i2_V_fu_417_p2;
                    zext_ln887_reg_727(6 downto 0) <= zext_ln887_fu_407_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i3_V_reg_825 <= i3_V_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((compute2_V1_load_reg_713 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                x7_V_reg_779 <= x7_V_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (compute2_V1_load_reg_713 = ap_const_lv1_1))) then
                x8_V_reg_802 <= x8_V_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                y3_V_reg_745 <= y3_V_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_29_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln544_22_reg_750(7 downto 0) <= zext_ln544_22_fu_435_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_32_fu_524_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (compute2_V1_load_reg_713 = ap_const_lv1_1))) then
                    zext_ln544_24_reg_807(7 downto 0) <= zext_ln544_24_fu_536_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_33_fu_485_p2 = ap_const_lv1_0) and (compute2_V1_load_reg_713 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln544_25_reg_784(7 downto 0) <= zext_ln544_25_fu_497_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (((icmp_ln887_32_fu_524_p2 = ap_const_lv1_1) and (compute2_V1_load_reg_713 = ap_const_lv1_1)) or ((compute2_V1_load_reg_713 = ap_const_lv1_0) and (icmp_ln887_33_fu_485_p2 = ap_const_lv1_1))))) then
                    zext_ln81_reg_817(6 downto 0) <= zext_ln81_fu_541_p1(6 downto 0);
            end if;
        end if;
    end process;
    mul_ln821_reg_708(1 downto 0) <= "00";
    compute1_temp_V_reg_717(31 downto 1) <= "0000000000000000000000000000000";
    zext_ln887_reg_727(31 downto 7) <= "0000000000000000000000000";
    zext_ln544_22_reg_750(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln544_25_reg_784(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln544_24_reg_807(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln81_reg_817(13 downto 7) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_0510_0_empty_n, match2_empty_n, ap_CS_fsm_state5, icmp_ln887_31_fu_439_p2, compute2_V1_load_reg_713, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln887_29_fu_423_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln887_33_fu_485_p2, icmp_ln887_32_fu_524_p2, ap_CS_fsm_state10, icmp_ln887_36_fu_578_p2, icmp_ln887_fu_411_p2, icmp_ln887_30_fu_468_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_0510_0_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_fu_411_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln887_29_fu_423_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (match2_empty_n = ap_const_logic_0))) and (icmp_ln887_31_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (match2_empty_n = ap_const_logic_0))) and (icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_30_fu_468_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (((icmp_ln887_32_fu_524_p2 = ap_const_lv1_1) and (compute2_V1_load_reg_713 = ap_const_lv1_1)) or ((compute2_V1_load_reg_713 = ap_const_lv1_0) and (icmp_ln887_33_fu_485_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((icmp_ln887_32_fu_524_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (compute2_V1_load_reg_713 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln887_36_fu_578_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln821_fu_600_p2 <= std_logic_vector(unsigned(zext_ln821_fu_596_p1) + unsigned(mul_ln821_reg_708));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_0510_0_empty_n)
    begin
                ap_block_state1 <= ((p_0510_0_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state5_assign_proc : process(match2_empty_n, icmp_ln887_31_fu_439_p2)
    begin
                ap_block_state5 <= ((icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (match2_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, icmp_ln887_fu_411_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_fu_411_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln887_fu_411_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_fu_411_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    compute1_V_address0 <= compute1_V_addr_reg_698;

    compute1_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            compute1_V_ce0 <= ap_const_logic_1;
        else 
            compute1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    compute1_V_d0 <= compute1_temp_V_reg_717;

    compute1_V_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln887_30_fu_468_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln887_30_fu_468_p2 = ap_const_lv1_1))) then 
            compute1_V_we0 <= ap_const_logic_1;
        else 
            compute1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    compute1_temp_V_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(compute2_V1_q0),32));
    compute2_V1_address0 <= zext_ln544_fu_382_p1(5 - 1 downto 0);

    compute2_V1_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_0510_0_empty_n)
    begin
        if ((not(((p_0510_0_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            compute2_V1_ce0 <= ap_const_logic_1;
        else 
            compute2_V1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hcl_rdv3_V_address0 <= zext_ln791_4_fu_519_p1(18 - 1 downto 0);

    hcl_rdv3_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hcl_rdv3_V_ce0 <= ap_const_logic_1;
        else 
            hcl_rdv3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i2_V_fu_417_p2 <= std_logic_vector(unsigned(bvh_d_index_reg_292) + unsigned(ap_const_lv7_1));
    i3_V_fu_584_p2 <= std_logic_vector(unsigned(p_0982_0_i_i_reg_371) + unsigned(ap_const_lv8_1));
    icmp_ln887_29_fu_423_p2 <= "1" when (p_0688_0_i_i_reg_304 = ap_const_lv8_9C) else "0";
    icmp_ln887_30_fu_468_p2 <= "1" when (p_0734_0_i_i_reg_338 = ap_const_lv8_9C) else "0";
    icmp_ln887_31_fu_439_p2 <= "1" when (p_0652_0_i_i_reg_327 = ap_const_lv13_185E) else "0";
    icmp_ln887_32_fu_524_p2 <= "1" when (p_0895_0_i_i_reg_360 = ap_const_lv8_9C) else "0";
    icmp_ln887_33_fu_485_p2 <= "1" when (p_0856_0_i_i_reg_349 = ap_const_lv8_9C) else "0";
    icmp_ln887_34_fu_571_p2 <= "0" when (result_V_q0 = ap_const_lv13_0) else "1";
    icmp_ln887_35_fu_564_p2 <= "0" when (zext_ln786_fu_545_p1 = select_ln887_fu_556_p3) else "1";
    icmp_ln887_36_fu_578_p2 <= "1" when (p_0982_0_i_i_reg_371 = ap_const_lv8_9C) else "0";
    icmp_ln887_fu_411_p2 <= "1" when (bvh_d_index_reg_292 = ap_const_lv7_40) else "0";

    match2_blk_n_assign_proc : process(match2_empty_n, ap_CS_fsm_state5, icmp_ln887_31_fu_439_p2)
    begin
        if (((icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            match2_blk_n <= match2_empty_n;
        else 
            match2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    match2_read_assign_proc : process(match2_empty_n, ap_CS_fsm_state5, icmp_ln887_31_fu_439_p2)
    begin
        if ((not(((icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (match2_empty_n = ap_const_logic_0))) and (icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            match2_read <= ap_const_logic_1;
        else 
            match2_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1371_fu_680_p0 <= mul_ln1371_fu_680_p00(5 - 1 downto 0);
    mul_ln1371_fu_680_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0510_0_read_reg_686),18));
    mul_ln1371_fu_680_p1 <= ap_const_lv18_2700(15 - 1 downto 0);
    mul_ln791_fu_674_p0 <= mul_ln791_fu_674_p00(5 - 1 downto 0);
    mul_ln791_fu_674_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0510_0_read_reg_686),20));
    mul_ln791_fu_674_p1 <= ap_const_lv20_2700(15 - 1 downto 0);
    mul_ln821_fu_394_p0 <= mul_ln821_fu_394_p00(5 - 1 downto 0);
    mul_ln821_fu_394_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0510_0_read_reg_686),13));
    mul_ln821_fu_394_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln821_fu_394_p0) * unsigned(ap_const_lv13_9C), 13));

    p_0510_0_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_0510_0_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_0510_0_blk_n <= p_0510_0_empty_n;
        else 
            p_0510_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_0510_0_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_0510_0_empty_n)
    begin
        if ((not(((p_0510_0_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_0510_0_read <= ap_const_logic_1;
        else 
            p_0510_0_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Repl2_s_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_V_q0),64));
    p_Result_5_fu_549_p3 <= hcl_rdv3_V_q0(to_integer(unsigned(zext_ln887_reg_727)) downto to_integer(unsigned(zext_ln887_reg_727))) when (to_integer(unsigned(zext_ln887_reg_727))>= 0 and to_integer(unsigned(zext_ln887_reg_727))<=63) else "-";
    p_Result_s_fu_451_p3 <= match2_dout(to_integer(unsigned(zext_ln887_reg_727)) downto to_integer(unsigned(zext_ln887_reg_727))) when (to_integer(unsigned(zext_ln887_reg_727))>= 0 and to_integer(unsigned(zext_ln887_reg_727))<=63) else "-";
    prototypeCounter_V_address0 <= zext_ln180_1_fu_665_p1(18 - 1 downto 0);

    prototypeCounter_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            prototypeCounter_V_ce0 <= ap_const_logic_1;
        else 
            prototypeCounter_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prototypeCounter_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_V_q0),32));

    prototypeCounter_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            prototypeCounter_V_we0 <= ap_const_logic_1;
        else 
            prototypeCounter_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prototype_V_address0 <= sext_ln821_fu_637_p1(12 - 1 downto 0);

    prototype_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            prototype_V_ce0 <= ap_const_logic_1;
        else 
            prototype_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    prototype_V_d0_proc : process(zext_ln887_reg_727, p_Repl2_s_fu_641_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        prototype_V_d0 <= ap_const_lv64_0;
        if to_integer(unsigned(zext_ln887_reg_727)) >= ap_const_lv64_0'low and to_integer(unsigned(zext_ln887_reg_727)) <= ap_const_lv64_0'high then
            result(0) := '0';
            for i in p_Repl2_s_fu_641_p1'range loop
                result(0) := result(0) or p_Repl2_s_fu_641_p1(i);
            end loop;
            prototype_V_d0(to_integer(unsigned(zext_ln887_reg_727))) <= result(0);
        end if;
    end process;


    prototype_V_we0_assign_proc : process(ap_CS_fsm_state11, shl_ln821_fu_658_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            prototype_V_we0 <= shl_ln821_fu_658_p2;
        else 
            prototype_V_we0 <= ap_const_lv8_0;
        end if; 
    end process;

    r_V_fu_445_p2 <= std_logic_vector(unsigned(p_0652_0_i_i_reg_327) + unsigned(ap_const_lv13_1));

    result_V_address0_assign_proc : process(ap_CS_fsm_state5, compute2_V1_load_reg_713, zext_ln544_22_reg_750, ap_CS_fsm_state7, zext_ln544_25_fu_497_p1, icmp_ln887_33_fu_485_p2, zext_ln544_24_fu_536_p1, icmp_ln887_32_fu_524_p2, ap_CS_fsm_state10, zext_ln544_26_fu_590_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            result_V_address0 <= zext_ln544_26_fu_590_p1(8 - 1 downto 0);
        elsif (((icmp_ln887_32_fu_524_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (compute2_V1_load_reg_713 = ap_const_lv1_1))) then 
            result_V_address0 <= zext_ln544_24_fu_536_p1(8 - 1 downto 0);
        elsif (((icmp_ln887_33_fu_485_p2 = ap_const_lv1_0) and (compute2_V1_load_reg_713 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            result_V_address0 <= zext_ln544_25_fu_497_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            result_V_address0 <= zext_ln544_22_reg_750(8 - 1 downto 0);
        else 
            result_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    result_V_ce0_assign_proc : process(match2_empty_n, ap_CS_fsm_state5, icmp_ln887_31_fu_439_p2, compute2_V1_load_reg_713, ap_CS_fsm_state7, icmp_ln887_33_fu_485_p2, icmp_ln887_32_fu_524_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (match2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln887_32_fu_524_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (compute2_V1_load_reg_713 = ap_const_lv1_1)) or ((icmp_ln887_33_fu_485_p2 = ap_const_lv1_0) and (compute2_V1_load_reg_713 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            result_V_ce0 <= ap_const_logic_1;
        else 
            result_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_V_we0_assign_proc : process(match2_empty_n, ap_CS_fsm_state5, icmp_ln887_31_fu_439_p2)
    begin
        if ((not(((icmp_ln887_31_fu_439_p2 = ap_const_lv1_0) and (match2_empty_n = ap_const_logic_0))) and (icmp_ln887_31_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            result_V_we0 <= ap_const_logic_1;
        else 
            result_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_8_fu_632_p2 <= std_logic_vector(unsigned(mul_ln1371_reg_722) + unsigned(zext_ln215_fu_628_p1));
    ret_V_fu_623_p2 <= std_logic_vector(unsigned(shl_ln_fu_615_p3) + unsigned(zext_ln81_reg_817));
    select_ln887_fu_556_p3 <= 
        ap_const_lv14_3FFF when (p_Result_5_fu_549_p3(0) = '1') else 
        ap_const_lv14_0;
        sext_ln821_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln821_reg_830),64));

    shl_ln821_fu_658_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln821_8_fu_655_p1(8-1 downto 0)))));
    shl_ln_fu_615_p3 <= (p_0982_0_i_i_reg_371 & ap_const_lv6_0);

    sum1_V_address0_assign_proc : process(ap_CS_fsm_state6, zext_ln544_25_reg_784, zext_ln544_24_reg_807, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln544_23_fu_480_p1, zext_ln544_26_fu_590_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sum1_V_address0 <= zext_ln544_26_fu_590_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sum1_V_address0 <= zext_ln544_24_reg_807(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sum1_V_address0 <= zext_ln544_25_reg_784(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sum1_V_address0 <= zext_ln544_23_fu_480_p1(8 - 1 downto 0);
        else 
            sum1_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum1_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sum1_V_ce0 <= ap_const_logic_1;
        else 
            sum1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum1_V_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, icmp_ln887_35_fu_564_p2, icmp_ln887_34_fu_571_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sum1_V_d0 <= icmp_ln887_34_fu_571_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sum1_V_d0 <= icmp_ln887_35_fu_564_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sum1_V_d0 <= ap_const_lv1_0;
        else 
            sum1_V_d0 <= "X";
        end if; 
    end process;


    sum1_V_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln887_30_fu_468_p2, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln887_30_fu_468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            sum1_V_we0 <= ap_const_logic_1;
        else 
            sum1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_V_fu_462_p2 <= std_logic_vector(unsigned(zext_ln68_fu_458_p1) + unsigned(p_0757_4_i_i_reg_315));
    tmp_35_fu_511_p3 <= (tmp_fu_502_p4 & p_0856_0_i_i_reg_349);
    tmp_fu_502_p4 <= mul_ln791_reg_703(19 downto 8);
    x6_V_fu_474_p2 <= std_logic_vector(unsigned(p_0734_0_i_i_reg_338) + unsigned(ap_const_lv8_1));
    x7_V_fu_491_p2 <= std_logic_vector(unsigned(p_0856_0_i_i_reg_349) + unsigned(ap_const_lv8_1));
    x8_V_fu_530_p2 <= std_logic_vector(unsigned(p_0895_0_i_i_reg_360) + unsigned(ap_const_lv8_1));
    y3_V_fu_429_p2 <= std_logic_vector(unsigned(p_0688_0_i_i_reg_304) + unsigned(ap_const_lv8_1));
    zext_ln180_1_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_8_reg_845),64));
    zext_ln215_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_623_p2),18));
    zext_ln544_22_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0688_0_i_i_reg_304),64));
    zext_ln544_23_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0734_0_i_i_reg_338),64));
    zext_ln544_24_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0895_0_i_i_reg_360),64));
    zext_ln544_25_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0856_0_i_i_reg_349),64));
    zext_ln544_26_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0982_0_i_i_reg_371),64));
    zext_ln544_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0510_0_dout),64));
    zext_ln68_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_451_p3),13));
    zext_ln786_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_V_q0),14));
    zext_ln791_4_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_511_p3),64));
    zext_ln81_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_reg_292),14));
    zext_ln821_8_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_reg_840),8));
    zext_ln821_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0982_0_i_i_reg_371),13));
    zext_ln887_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_reg_292),32));
end behav;
